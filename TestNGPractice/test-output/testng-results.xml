<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="1" ignored="0" total="9" passed="8">
  <reporter-output>
  </reporter-output>
  <suite name="Suite" duration-ms="94" started-at="2019-10-28T21:05:48Z" finished-at="2019-10-28T21:05:48Z">
    <groups>
      <group name="sanity">
        <method signature="Test3.secondtest()[pri:2, instance:seleniumpractice.Test3@61baa894]" name="secondtest" class="seleniumpractice.Test3"/>
      </group> <!-- sanity -->
    </groups>
    <test name="Test" duration-ms="94" started-at="2019-10-28T21:05:48Z" finished-at="2019-10-28T21:05:48Z">
      <class name="seleniumpractice.Test3">
        <test-method status="PASS" signature="firsttest()[pri:1, instance:seleniumpractice.Test3@61baa894]" name="firsttest" duration-ms="0" started-at="2019-10-28T21:05:48Z" finished-at="2019-10-28T21:05:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- firsttest -->
        <test-method status="FAIL" signature="secondtest()[pri:2, instance:seleniumpractice.Test3@61baa894]" name="secondtest" duration-ms="16" started-at="2019-10-28T21:05:48Z" depends-on-methods="seleniumpractice.Test3.firsttest" finished-at="2019-10-28T21:05:48Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[The following asserts failed:
expected [abc1] but found [abc]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: The following asserts failed:
expected [abc1] but found [abc]
at org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)
at seleniumpractice.Test3.secondtest(Test3.java:32)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:580)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:716)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:988)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.TestNG.privateMain(TestNG.java:1354)
at org.testng.TestNG.main(TestNG.java:1323)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- secondtest -->
      </class> <!-- seleniumpractice.Test3 -->
      <class name="seleniumpractice.Test2">
        <test-method status="PASS" signature="Test5()[pri:0, instance:seleniumpractice.Test2@65e579dc]" name="Test5" duration-ms="0" started-at="2019-10-28T21:05:48Z" finished-at="2019-10-28T21:05:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test5 -->
        <test-method status="PASS" signature="Test4()[pri:0, instance:seleniumpractice.Test2@65e579dc]" name="Test4" duration-ms="0" started-at="2019-10-28T21:05:48Z" finished-at="2019-10-28T21:05:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test4 -->
      </class> <!-- seleniumpractice.Test2 -->
      <class name="seleniumpractice.Test1">
        <test-method status="PASS" signature="beforeSuite()[pri:0, instance:seleniumpractice.Test1@4ca8195f]" name="beforeSuite" is-config="true" duration-ms="31" started-at="2019-10-28T21:05:48Z" finished-at="2019-10-28T21:05:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeSuite -->
        <test-method status="PASS" signature="beforeTest()[pri:0, instance:seleniumpractice.Test1@4ca8195f]" name="beforeTest" is-config="true" duration-ms="0" started-at="2019-10-28T21:05:48Z" finished-at="2019-10-28T21:05:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:seleniumpractice.Test1@4ca8195f]" name="beforeClass" is-config="true" duration-ms="15" started-at="2019-10-28T21:05:48Z" finished-at="2019-10-28T21:05:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:seleniumpractice.Test1@4ca8195f]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-10-28T21:05:48Z" finished-at="2019-10-28T21:05:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:seleniumpractice.Test1@4ca8195f]" name="afterMethod" is-config="true" duration-ms="0" started-at="2019-10-28T21:05:48Z" finished-at="2019-10-28T21:05:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:seleniumpractice.Test1@4ca8195f]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-10-28T21:05:48Z" finished-at="2019-10-28T21:05:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="f(java.lang.Integer, java.lang.String)[pri:0, instance:seleniumpractice.Test1@4ca8195f]" name="f" duration-ms="0" started-at="2019-10-28T21:05:48Z" data-provider="dp" finished-at="2019-10-28T21:05:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[a]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- f -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:seleniumpractice.Test1@4ca8195f]" name="afterMethod" is-config="true" duration-ms="0" started-at="2019-10-28T21:05:48Z" finished-at="2019-10-28T21:05:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:seleniumpractice.Test1@4ca8195f]" name="beforeMethod" is-config="true" duration-ms="15" started-at="2019-10-28T21:05:48Z" finished-at="2019-10-28T21:05:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="f(java.lang.Integer, java.lang.String)[pri:0, instance:seleniumpractice.Test1@4ca8195f]" name="f" duration-ms="0" started-at="2019-10-28T21:05:48Z" data-provider="dp" finished-at="2019-10-28T21:05:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[b]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- f -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:seleniumpractice.Test1@4ca8195f]" name="afterMethod" is-config="true" duration-ms="0" started-at="2019-10-28T21:05:48Z" finished-at="2019-10-28T21:05:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:seleniumpractice.Test1@4ca8195f]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-10-28T21:05:48Z" finished-at="2019-10-28T21:05:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="test1()[pri:0, instance:seleniumpractice.Test1@4ca8195f]" name="test1" duration-ms="0" started-at="2019-10-28T21:05:48Z" finished-at="2019-10-28T21:05:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test1 -->
        <test-method status="PASS" signature="test3()[pri:0, instance:seleniumpractice.Test1@4ca8195f]" name="test3" duration-ms="0" started-at="2019-10-28T21:05:48Z" finished-at="2019-10-28T21:05:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test3 -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:seleniumpractice.Test1@4ca8195f]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-10-28T21:05:48Z" finished-at="2019-10-28T21:05:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:seleniumpractice.Test1@4ca8195f]" name="afterMethod" is-config="true" duration-ms="0" started-at="2019-10-28T21:05:48Z" finished-at="2019-10-28T21:05:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterClass()[pri:0, instance:seleniumpractice.Test1@4ca8195f]" name="afterClass" is-config="true" duration-ms="0" started-at="2019-10-28T21:05:48Z" finished-at="2019-10-28T21:05:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:seleniumpractice.Test1@4ca8195f]" name="afterMethod" is-config="true" duration-ms="0" started-at="2019-10-28T21:05:48Z" finished-at="2019-10-28T21:05:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="test2()[pri:0, instance:seleniumpractice.Test1@4ca8195f]" name="test2" duration-ms="0" started-at="2019-10-28T21:05:48Z" finished-at="2019-10-28T21:05:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test2 -->
        <test-method status="PASS" signature="afterTest()[pri:0, instance:seleniumpractice.Test1@4ca8195f]" name="afterTest" is-config="true" duration-ms="0" started-at="2019-10-28T21:05:48Z" finished-at="2019-10-28T21:05:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method status="PASS" signature="afterSuite()[pri:0, instance:seleniumpractice.Test1@4ca8195f]" name="afterSuite" is-config="true" duration-ms="0" started-at="2019-10-28T21:05:49Z" finished-at="2019-10-28T21:05:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterSuite -->
      </class> <!-- seleniumpractice.Test1 -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
